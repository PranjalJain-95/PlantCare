{"ast":null,"code":"var _jsxFileName = \"/Users/pranjal/Documents/GitHub/SoftwareDev/client/plantcare/src/components/grid/grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GridLayout from 'react-grid-layout';\nimport styled from 'styled-components';\nimport herb from '../../images/herb.png';\nimport bush from '../../images/bush.png';\nimport tree from '../../images/tree.png';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GridItemWrapper = styled.div`\n    background: #FFEDD1; \n  `;\n_c = GridItemWrapper;\nconst GridItemContent = styled.div`\n    padding: 8px;\n  `;\n_c2 = GridItemContent;\nconst Root = styled.div`\n    padding: 16px;\n  `;\n_c3 = Root;\n\nconst plantImage = type => {\n  if (type == 'tree') {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: tree,\n      width: \"40\",\n      height: \"40\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  } else if (type == 'shrub') {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: bush,\n      width: \"40\",\n      height: \"40\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: herb,\n      width: \"40\",\n      height: \"40\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n};\n\nexport const Grid = () => {\n  _s();\n\n  const [names, setNames] = useState([]);\n  const [grid, setGrid] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const getLayouts = () => {\n    if (!loading) {\n      const savedLayouts = localStorage.getItem('grid-layout');\n      return savedLayouts ? JSON.parse(savedLayouts) : {\n        grid\n      };\n    }\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:4000/planner', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'token': localStorage.getItem('token')\n      }\n    }).then(response => response.json()).then(data => {\n      const jsonReceived = JSON.parse(data.planner_json); // console.log(data);\n\n      setNames(jsonReceived.plants);\n      setGrid(jsonReceived.grid);\n      localStorage.setItem('grid-layout', JSON.stringify(jsonReceived.grid));\n      setLoading(false);\n    });\n  }, []);\n\n  const handleLayoutChange = grid => {\n    localStorage.setItem('grid-layout', JSON.stringify(grid)); // Rebuild JSON here\n\n    console.log(names);\n    const responseJson = {\n      planner_json: {\n        'plants': names,\n        'grid': JSON.parse(localStorage.getItem('grid-layout'))\n      }\n    };\n    const stringJSON = JSON.stringify(responseJson); // console.log(JSON.stringify(responseJson));\n    // Post here\n    // console.log(JSON.stringify(responseJson));\n\n    console.log(stringJSON);\n    fetch('http://localhost:4000/planner', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'token': localStorage.getItem('token')\n      },\n      body: stringJSON\n    }).then(response => response.json()).then(data => {\n      console.log('Hi'); // console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Root, {\n    children: /*#__PURE__*/_jsxDEV(GridLayout, {\n      layout: getLayouts(),\n      cols: 4,\n      rowHeight: 125,\n      width: 500,\n      onLayoutChange: handleLayoutChange,\n      children: names.map(item => /*#__PURE__*/_jsxDEV(GridItemWrapper, {\n        children: /*#__PURE__*/_jsxDEV(GridItemContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"name\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"image_location\",\n            children: plantImage(item.type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, item.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Grid, \"e8YUOGYV5d4XuBAGL+c2XOfwo0g=\");\n\n_c4 = Grid;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"GridItemWrapper\");\n$RefreshReg$(_c2, \"GridItemContent\");\n$RefreshReg$(_c3, \"Root\");\n$RefreshReg$(_c4, \"Grid\");","map":{"version":3,"sources":["/Users/pranjal/Documents/GitHub/SoftwareDev/client/plantcare/src/components/grid/grid.js"],"names":["React","useState","useEffect","GridLayout","styled","herb","bush","tree","GridItemWrapper","div","GridItemContent","Root","plantImage","type","Grid","names","setNames","grid","setGrid","loading","setLoading","getLayouts","savedLayouts","localStorage","getItem","JSON","parse","fetch","method","headers","then","response","json","data","jsonReceived","planner_json","plants","setItem","stringify","handleLayoutChange","console","log","responseJson","stringJSON","body","map","item","name"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport GridLayout from 'react-grid-layout';\nimport styled from 'styled-components';\n\nimport herb from '../../images/herb.png';\nimport bush from '../../images/bush.png';\nimport tree from '../../images/tree.png';\n\nimport './style.css';\n\nconst GridItemWrapper = styled.div`\n    background: #FFEDD1; \n  `;\n\nconst GridItemContent = styled.div`\n    padding: 8px;\n  `;\n\nconst Root = styled.div`\n    padding: 16px;\n  `;\n\nconst plantImage = (type) => {\n  if (type == 'tree') {\n    return <img src={tree} width='40' height='40'></img>;\n  } else if (type == 'shrub') {\n    return <img src={bush} width='40' height='40'></img>;\n  } else {\n    return <img src={herb} width='40' height='40'></img>;\n  }\n};\n\nexport const Grid = () => {\n  const [names, setNames] = useState([]);\n  const [grid, setGrid] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n\n  const getLayouts = () => {\n    if (!loading) {\n      const savedLayouts = localStorage.getItem('grid-layout');\n      return savedLayouts ? JSON.parse(savedLayouts) : {grid};\n    }\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:4000/planner', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'token': localStorage.getItem('token'),\n      },\n    })\n        .then((response) => response.json())\n        .then((data) => {\n          const jsonReceived = JSON.parse(data.planner_json);\n          // console.log(data);\n          setNames(jsonReceived.plants);\n          setGrid(jsonReceived.grid);\n          localStorage.setItem('grid-layout', JSON.stringify(jsonReceived.grid));\n          setLoading(false);\n        });\n  }, []);\n\n  const handleLayoutChange = (grid) => {\n    localStorage.setItem('grid-layout', JSON.stringify(grid));\n\n    // Rebuild JSON here\n    console.log(names);\n    const responseJson = {\n      planner_json: {\n        'plants': names,\n        'grid': JSON.parse(localStorage.getItem('grid-layout')),\n      },\n    };\n    const stringJSON = JSON.stringify(responseJson);\n    // console.log(JSON.stringify(responseJson));\n    // Post here\n    // console.log(JSON.stringify(responseJson));\n    console.log(stringJSON);\n    fetch('http://localhost:4000/planner', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'token': localStorage.getItem('token'),\n      },\n      body: stringJSON,\n    })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log('Hi');\n          // console.log(data);\n        });\n  };\n\n  return (\n    <Root>\n      <GridLayout layout={getLayouts()} cols={4} rowHeight={125} width={500} onLayoutChange={handleLayoutChange}>\n        {names.map((item) => (\n          <GridItemWrapper key={item.name}>\n            <GridItemContent>\n              <div id='name'>\n                {item.name}\n              </div>\n              <div id='image_location'>\n                {plantImage(item.type)}\n              </div>\n            </GridItemContent>\n          </GridItemWrapper>\n        ))}\n      </GridLayout>\n    </Root>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
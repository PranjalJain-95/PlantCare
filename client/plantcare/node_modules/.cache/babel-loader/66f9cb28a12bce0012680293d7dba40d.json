{"ast":null,"code":"var _jsxFileName = \"/Users/pranjal/Documents/GitHub/SoftwareDev/client/plantcare/src/components/plant_list/plant_list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport './style.css';\nimport plant_pic from '../../images/plant2.png';\nimport herb from '../../images/herb.png';\nimport bush from '../../images/bush.png';\nimport tree from '../../images/tree.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst plantImage = type => {\n  if (type == 'tree') {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: tree,\n      width: \"30\",\n      height: \"30\",\n      id: \"img_line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  } else if (type == 'shrub') {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: bush,\n      width: \"30\",\n      height: \"30\",\n      id: \"img_line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: herb,\n      width: \"30\",\n      height: \"30\",\n      id: \"img_line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n};\n\nexport const PlantList = () => {\n  _s();\n\n  const [emptyPlanner, setEmptyPlanner] = useState(false);\n  const [filledPlanner, setFilledPlanner] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:4000/planner', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'token': localStorage.getItem('token')\n      }\n    }).then(response => response.json()).then(data => {\n      if (JSON.stringify(data) === '{}') {\n        setEmptyPlanner(true);\n      } else {\n        const jsonReceived = JSON.parse(data.planner_json);\n        setFilledPlanner(jsonReceived.plants);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"list_block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"title_block\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"list_title_text\",\n        children: \"My Plants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        id: \"custom_line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [emptyPlanner === true ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please add some plants.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 43\n      }, this) : null, filledPlanner.map(item => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"same_line\",\n          children: [plantImage(item.type), /*#__PURE__*/_jsxDEV(\"li\", {\n            id: \"text_line\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 23\n        }, this)\n      }, item.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PlantList, \"xvpP78BUFHZcaitoho5Xk6jSyh4=\");\n\n_c = PlantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantList\");","map":{"version":3,"sources":["/Users/pranjal/Documents/GitHub/SoftwareDev/client/plantcare/src/components/plant_list/plant_list.js"],"names":["React","useState","useEffect","DataTable","Column","plant_pic","herb","bush","tree","plantImage","type","PlantList","emptyPlanner","setEmptyPlanner","filledPlanner","setFilledPlanner","fetch","method","headers","localStorage","getItem","then","response","json","data","JSON","stringify","jsonReceived","parse","planner_json","plants","map","item","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\n\nimport './style.css'; \nimport plant_pic from '../../images/plant2.png'\nimport herb from '../../images/herb.png'\nimport bush from '../../images/bush.png'\nimport tree from '../../images/tree.png'\n\nconst plantImage = (type) => {\n    if (type == 'tree'){\n        return <img src={tree} width='30' height='30' id='img_line'></img>\n    }\n    else if (type == 'shrub'){\n        return <img src={bush} width='30' height='30' id='img_line'></img>\n    }\n    else { \n        return <img src={herb} width='30' height='30' id='img_line'></img>\n    }\n}\n\nexport const PlantList = () => {\n    const [emptyPlanner, setEmptyPlanner] = useState(false);\n    const [filledPlanner, setFilledPlanner] = useState([]); \n\n    useEffect(() => {\n        fetch('http://localhost:4000/planner', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'token': localStorage.getItem('token')\n          },\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (JSON.stringify(data) === '{}') { \n                setEmptyPlanner(true); \n            }\n            else{ \n                const jsonReceived = JSON.parse(data.planner_json); \n                setFilledPlanner(jsonReceived.plants); \n            }\n        })\n    }, []); \n\n\n    return (\n        <div id='list_block'>\n            <div id='title_block'>\n                <p id='list_title_text'>My Plants</p>\n                {/* <img src={plant_pic} width='25' height='25' id='logo'></img> */}\n                <hr id='custom_line'></hr>\n            </div>\n            <div>\n                {emptyPlanner === true ? (<p>Please add some plants.</p>): null}\n                \n                {filledPlanner.map(item => (\n                    <ul key={item.name} >\n                      <div id='same_line'>\n                        {plantImage(item.type)}\n                         <li id='text_line'>{item.name}</li>\n                      </div>  \n                      \n                    </ul>\n                ))}\n            </div>\n            \n        </div>\n    );\n}\n          "]},"metadata":{},"sourceType":"module"}